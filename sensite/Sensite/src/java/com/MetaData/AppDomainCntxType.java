////////////////////////////////////////////////////////////////////////
//
// AppDomainCntxType.java
//
// This file was generated by XMLSpy 2014 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.MetaData;

public class AppDomainCntxType extends com.altova.xml.TypeBase
{
	public static com.altova.xml.meta.ComplexType getStaticInfo() { return new com.altova.xml.meta.ComplexType(com.MetaData.MetaData_TypeInfo.binder.getTypes()[com.MetaData.MetaData_TypeInfo._altova_ti_altova_AppDomainCntxType]); }
	
	public AppDomainCntxType(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}

	private void instantiateMembers()
	{

		description= new MemberElement_description (this, com.MetaData.MetaData_TypeInfo.binder.getMembers()[com.MetaData.MetaData_TypeInfo._altova_mi_altova_AppDomainCntxType._description]);
		name= new MemberElement_name (this, com.MetaData.MetaData_TypeInfo.binder.getMembers()[com.MetaData.MetaData_TypeInfo._altova_mi_altova_AppDomainCntxType._name]);
		standardName= new MemberElement_standardName (this, com.MetaData.MetaData_TypeInfo.binder.getMembers()[com.MetaData.MetaData_TypeInfo._altova_mi_altova_AppDomainCntxType._standardName]);
		standardDescription= new MemberElement_standardDescription (this, com.MetaData.MetaData_TypeInfo.binder.getMembers()[com.MetaData.MetaData_TypeInfo._altova_mi_altova_AppDomainCntxType._standardDescription]);
	}
	// Attributes


	// Elements
	
	public MemberElement_description description;

		public static class MemberElement_description
		{
			public static class MemberElement_description_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_description member;
				public MemberElement_description_Iterator(MemberElement_description member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MetaData.xs.stringType nx = new com.MetaData.xs.stringType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_description (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MetaData.xs.stringType at(int index) {return new com.MetaData.xs.stringType(owner.getElementAt(info, index));}
			public com.MetaData.xs.stringType first() {return new com.MetaData.xs.stringType(owner.getElementFirst(info));}
			public com.MetaData.xs.stringType last(){return new com.MetaData.xs.stringType(owner.getElementLast(info));}
			public com.MetaData.xs.stringType append(){return new com.MetaData.xs.stringType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_description_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_name name;

		public static class MemberElement_name
		{
			public static class MemberElement_name_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_name member;
				public MemberElement_name_Iterator(MemberElement_name member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MetaData.xs.stringType nx = new com.MetaData.xs.stringType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_name (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MetaData.xs.stringType at(int index) {return new com.MetaData.xs.stringType(owner.getElementAt(info, index));}
			public com.MetaData.xs.stringType first() {return new com.MetaData.xs.stringType(owner.getElementFirst(info));}
			public com.MetaData.xs.stringType last(){return new com.MetaData.xs.stringType(owner.getElementLast(info));}
			public com.MetaData.xs.stringType append(){return new com.MetaData.xs.stringType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_name_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_standardName standardName;

		public static class MemberElement_standardName
		{
			public static class MemberElement_standardName_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_standardName member;
				public MemberElement_standardName_Iterator(MemberElement_standardName member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MetaData.xs.stringType nx = new com.MetaData.xs.stringType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_standardName (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MetaData.xs.stringType at(int index) {return new com.MetaData.xs.stringType(owner.getElementAt(info, index));}
			public com.MetaData.xs.stringType first() {return new com.MetaData.xs.stringType(owner.getElementFirst(info));}
			public com.MetaData.xs.stringType last(){return new com.MetaData.xs.stringType(owner.getElementLast(info));}
			public com.MetaData.xs.stringType append(){return new com.MetaData.xs.stringType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_standardName_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_standardDescription standardDescription;

		public static class MemberElement_standardDescription
		{
			public static class MemberElement_standardDescription_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_standardDescription member;
				public MemberElement_standardDescription_Iterator(MemberElement_standardDescription member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MetaData.xs.stringType nx = new com.MetaData.xs.stringType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_standardDescription (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MetaData.xs.stringType at(int index) {return new com.MetaData.xs.stringType(owner.getElementAt(info, index));}
			public com.MetaData.xs.stringType first() {return new com.MetaData.xs.stringType(owner.getElementFirst(info));}
			public com.MetaData.xs.stringType last(){return new com.MetaData.xs.stringType(owner.getElementLast(info));}
			public com.MetaData.xs.stringType append(){return new com.MetaData.xs.stringType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_standardDescription_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
}
