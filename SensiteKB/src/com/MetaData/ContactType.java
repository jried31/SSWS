////////////////////////////////////////////////////////////////////////
//
// ContactType.java
//
// This file was generated by XMLSpy 2014 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.MetaData;

public class ContactType extends com.altova.xml.TypeBase
{
	public static com.altova.xml.meta.ComplexType getStaticInfo() { return new com.altova.xml.meta.ComplexType(com.MetaData.MetaData_TypeInfo.binder.getTypes()[com.MetaData.MetaData_TypeInfo._altova_ti_altova_ContactType]); }
	
	public ContactType(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}

	private void instantiateMembers()
	{

		name= new MemberElement_name (this, com.MetaData.MetaData_TypeInfo.binder.getMembers()[com.MetaData.MetaData_TypeInfo._altova_mi_altova_ContactType._name]);
		organization= new MemberElement_organization (this, com.MetaData.MetaData_TypeInfo.binder.getMembers()[com.MetaData.MetaData_TypeInfo._altova_mi_altova_ContactType._organization]);
		position= new MemberElement_position (this, com.MetaData.MetaData_TypeInfo.binder.getMembers()[com.MetaData.MetaData_TypeInfo._altova_mi_altova_ContactType._position]);
		phone= new MemberElement_phone (this, com.MetaData.MetaData_TypeInfo.binder.getMembers()[com.MetaData.MetaData_TypeInfo._altova_mi_altova_ContactType._phone]);
		email= new MemberElement_email (this, com.MetaData.MetaData_TypeInfo.binder.getMembers()[com.MetaData.MetaData_TypeInfo._altova_mi_altova_ContactType._email]);
		eid= new MemberElement_eid (this, com.MetaData.MetaData_TypeInfo.binder.getMembers()[com.MetaData.MetaData_TypeInfo._altova_mi_altova_ContactType._eid]);
	}
	// Attributes


	// Elements
	
	public MemberElement_name name;

		public static class MemberElement_name
		{
			public static class MemberElement_name_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_name member;
				public MemberElement_name_Iterator(MemberElement_name member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MetaData.xs.stringType nx = new com.MetaData.xs.stringType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_name (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MetaData.xs.stringType at(int index) {return new com.MetaData.xs.stringType(owner.getElementAt(info, index));}
			public com.MetaData.xs.stringType first() {return new com.MetaData.xs.stringType(owner.getElementFirst(info));}
			public com.MetaData.xs.stringType last(){return new com.MetaData.xs.stringType(owner.getElementLast(info));}
			public com.MetaData.xs.stringType append(){return new com.MetaData.xs.stringType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_name_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_organization organization;

		public static class MemberElement_organization
		{
			public static class MemberElement_organization_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_organization member;
				public MemberElement_organization_Iterator(MemberElement_organization member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MetaData.xs.stringType nx = new com.MetaData.xs.stringType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_organization (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MetaData.xs.stringType at(int index) {return new com.MetaData.xs.stringType(owner.getElementAt(info, index));}
			public com.MetaData.xs.stringType first() {return new com.MetaData.xs.stringType(owner.getElementFirst(info));}
			public com.MetaData.xs.stringType last(){return new com.MetaData.xs.stringType(owner.getElementLast(info));}
			public com.MetaData.xs.stringType append(){return new com.MetaData.xs.stringType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_organization_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_position position;

		public static class MemberElement_position
		{
			public static class MemberElement_position_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_position member;
				public MemberElement_position_Iterator(MemberElement_position member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MetaData.xs.anyType nx = new com.MetaData.xs.anyType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_position (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MetaData.xs.anyType at(int index) {return new com.MetaData.xs.anyType(owner.getElementAt(info, index));}
			public com.MetaData.xs.anyType first() {return new com.MetaData.xs.anyType(owner.getElementFirst(info));}
			public com.MetaData.xs.anyType last(){return new com.MetaData.xs.anyType(owner.getElementLast(info));}
			public com.MetaData.xs.anyType append(){return new com.MetaData.xs.anyType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_position_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_phone phone;

		public static class MemberElement_phone
		{
			public static class MemberElement_phone_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_phone member;
				public MemberElement_phone_Iterator(MemberElement_phone member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MetaData.xs.stringType nx = new com.MetaData.xs.stringType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_phone (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MetaData.xs.stringType at(int index) {return new com.MetaData.xs.stringType(owner.getElementAt(info, index));}
			public com.MetaData.xs.stringType first() {return new com.MetaData.xs.stringType(owner.getElementFirst(info));}
			public com.MetaData.xs.stringType last(){return new com.MetaData.xs.stringType(owner.getElementLast(info));}
			public com.MetaData.xs.stringType append(){return new com.MetaData.xs.stringType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_phone_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_email email;

		public static class MemberElement_email
		{
			public static class MemberElement_email_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_email member;
				public MemberElement_email_Iterator(MemberElement_email member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MetaData.xs.stringType nx = new com.MetaData.xs.stringType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_email (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MetaData.xs.stringType at(int index) {return new com.MetaData.xs.stringType(owner.getElementAt(info, index));}
			public com.MetaData.xs.stringType first() {return new com.MetaData.xs.stringType(owner.getElementFirst(info));}
			public com.MetaData.xs.stringType last(){return new com.MetaData.xs.stringType(owner.getElementLast(info));}
			public com.MetaData.xs.stringType append(){return new com.MetaData.xs.stringType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_email_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_eid eid;

		public static class MemberElement_eid
		{
			public static class MemberElement_eid_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_eid member;
				public MemberElement_eid_Iterator(MemberElement_eid member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MetaData.xs.anyType nx = new com.MetaData.xs.anyType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_eid (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MetaData.xs.anyType at(int index) {return new com.MetaData.xs.anyType(owner.getElementAt(info, index));}
			public com.MetaData.xs.anyType first() {return new com.MetaData.xs.anyType(owner.getElementFirst(info));}
			public com.MetaData.xs.anyType last(){return new com.MetaData.xs.anyType(owner.getElementLast(info));}
			public com.MetaData.xs.anyType append(){return new com.MetaData.xs.anyType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_eid_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
}
