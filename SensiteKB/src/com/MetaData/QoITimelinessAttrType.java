////////////////////////////////////////////////////////////////////////
//
// QoITimelinessAttrType.java
//
// This file was generated by XMLSpy 2014 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.MetaData;

public class QoITimelinessAttrType extends com.altova.xml.TypeBase
{
	public static com.altova.xml.meta.ComplexType getStaticInfo() { return new com.altova.xml.meta.ComplexType(com.MetaData.MetaData_TypeInfo.binder.getTypes()[com.MetaData.MetaData_TypeInfo._altova_ti_altova_QoITimelinessAttrType]); }
	
	public QoITimelinessAttrType(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}

	private void instantiateMembers()
	{

		latencySource= new MemberElement_latencySource (this, com.MetaData.MetaData_TypeInfo.binder.getMembers()[com.MetaData.MetaData_TypeInfo._altova_mi_altova_QoITimelinessAttrType._latencySource]);
		detailLevel= new MemberElement_detailLevel (this, com.MetaData.MetaData_TypeInfo.binder.getMembers()[com.MetaData.MetaData_TypeInfo._altova_mi_altova_QoITimelinessAttrType._detailLevel]);
		validityExpiration= new MemberElement_validityExpiration (this, com.MetaData.MetaData_TypeInfo.binder.getMembers()[com.MetaData.MetaData_TypeInfo._altova_mi_altova_QoITimelinessAttrType._validityExpiration]);
		timelinessLevel= new MemberElement_timelinessLevel (this, com.MetaData.MetaData_TypeInfo.binder.getMembers()[com.MetaData.MetaData_TypeInfo._altova_mi_altova_QoITimelinessAttrType._timelinessLevel]);
	}
	// Attributes


	// Elements
	
	public MemberElement_latencySource latencySource;

		public static class MemberElement_latencySource
		{
			public static class MemberElement_latencySource_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_latencySource member;
				public MemberElement_latencySource_Iterator(MemberElement_latencySource member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MetaData.xs.doubleType nx = new com.MetaData.xs.doubleType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_latencySource (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MetaData.xs.doubleType at(int index) {return new com.MetaData.xs.doubleType(owner.getElementAt(info, index));}
			public com.MetaData.xs.doubleType first() {return new com.MetaData.xs.doubleType(owner.getElementFirst(info));}
			public com.MetaData.xs.doubleType last(){return new com.MetaData.xs.doubleType(owner.getElementLast(info));}
			public com.MetaData.xs.doubleType append(){return new com.MetaData.xs.doubleType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_latencySource_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_detailLevel detailLevel;

		public static class MemberElement_detailLevel
		{
			public static class MemberElement_detailLevel_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_detailLevel member;
				public MemberElement_detailLevel_Iterator(MemberElement_detailLevel member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MetaData.xs.doubleType nx = new com.MetaData.xs.doubleType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_detailLevel (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MetaData.xs.doubleType at(int index) {return new com.MetaData.xs.doubleType(owner.getElementAt(info, index));}
			public com.MetaData.xs.doubleType first() {return new com.MetaData.xs.doubleType(owner.getElementFirst(info));}
			public com.MetaData.xs.doubleType last(){return new com.MetaData.xs.doubleType(owner.getElementLast(info));}
			public com.MetaData.xs.doubleType append(){return new com.MetaData.xs.doubleType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_detailLevel_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_validityExpiration validityExpiration;

		public static class MemberElement_validityExpiration
		{
			public static class MemberElement_validityExpiration_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_validityExpiration member;
				public MemberElement_validityExpiration_Iterator(MemberElement_validityExpiration member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MetaData.xs.doubleType nx = new com.MetaData.xs.doubleType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_validityExpiration (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MetaData.xs.doubleType at(int index) {return new com.MetaData.xs.doubleType(owner.getElementAt(info, index));}
			public com.MetaData.xs.doubleType first() {return new com.MetaData.xs.doubleType(owner.getElementFirst(info));}
			public com.MetaData.xs.doubleType last(){return new com.MetaData.xs.doubleType(owner.getElementLast(info));}
			public com.MetaData.xs.doubleType append(){return new com.MetaData.xs.doubleType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_validityExpiration_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_timelinessLevel timelinessLevel;

		public static class MemberElement_timelinessLevel
		{
			public static class MemberElement_timelinessLevel_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_timelinessLevel member;
				public MemberElement_timelinessLevel_Iterator(MemberElement_timelinessLevel member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					QoIMetric nx = new QoIMetric(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_timelinessLevel (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public QoIMetric at(int index) {return new QoIMetric(owner.getElementAt(info, index));}
			public QoIMetric first() {return new QoIMetric(owner.getElementFirst(info));}
			public QoIMetric last(){return new QoIMetric(owner.getElementLast(info));}
			public QoIMetric append(){return new QoIMetric(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_timelinessLevel_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
}
